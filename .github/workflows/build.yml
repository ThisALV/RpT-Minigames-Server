name: Build

on:
  push:
  pull_request:

env:
  BUILD_TYPE: Release

jobs:
  build-ubuntu:
    strategy:
      fail-fast: false
      matrix:
        version: [18.04, 20.04]
        toolchain:
          - name: "GCC"
            install: "g++" # Space separated list for required packages
            cc: gcc
            cxx: g++
            ar: ar
            ranlib: ranlib
            ldflags: ""

          - name: "LLVM"
            install: "llvm clang lld" # Space separated list for required packages
            cc: clang
            cxx: clang++
            ar: llvm-ar
            ranlib: llvm-ranlib
            ldflags: "-fuse-ld=lld"

    runs-on: ubuntu-${{matrix.version}}
    name: Ubuntu ${{matrix.version}} ${{matrix.toolchain.name}} build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup ${{matrix.toolchain.name}}
        # Install toolchain packages requirements and Doxygen with DOT requirements
        run: sudo apt-get install -y doxygen graphviz $TOOLCHAIN

        env:
          TOOLCHAIN: ${{matrix.toolchain.install}}

      - name: Toolchain summary
        run: echo "Archiver=$(which $AR) ; Ranlib=$(which $RANLIB) ; CC=$CC ; CXX=$CXX ; LDflags=$LDFLAGS"

        env:
          CC: ${{matrix.toolchain.cc}}
          CXX: ${{matrix.toolchain.cxx}}
          AR: ${{matrix.toolchain.ar}}
          RANLIB: ${{matrix.toolchain.ranlib}}
          LDFLAGS: ${{matrix.toolchain.ldflags}}

      - name: Setup project deps
        working-directory: ${{github.workspace}}/dist
        run: sudo -E ./get-deps-debian.sh

        env:
          CC: ${{matrix.toolchain.cc}}
          CXX: ${{matrix.toolchain.cxx}}
          AR: ${{matrix.toolchain.ar}}
          RANLIB: ${{matrix.toolchain.ranlib}}
          LDFLAGS: ${{matrix.toolchain.ldflags}}

      - name: Generate and build project
        run: ./build.sh --debug-features

        env:
          CC: ${{matrix.toolchain.cc}}
          CXX: ${{matrix.toolchain.cxx}}
          AR: ${{matrix.toolchain.ar}}
          RANLIB: ${{matrix.toolchain.ranlib}}
          LDFLAGS: ${{matrix.toolchain.ldflags}}

      - name: Run tests
        working-directory: ${{github.workspace}}/build
        run: ctest

      - name: Install project
        run: sudo ./install.sh

      - name: Create TLS certificate and private key
        run: >
          sudo openssl req -batch -x509 -newkey rsa:2048
          -keyout localhost.key -out localhost.pem -nodes -days 1
          -subj "/CN=localhost"

      - name: Run server
        run: sudo minigames-server --game a --log-level t --testing --crt localhost.pem --privkey localhost.key

  build-mingw:
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: false
      matrix:
        msys:
          - architecture: x86_64
            env: MINGW64

          - architecture: i686
            env: MINGW32

    name: Windows ${{matrix.msys.env}} build
    steps:
      - name: Setup msys2 for ${{matrix.msys.env}}
        uses: msys2/setup-msys2@v2

        with:
          msystem: ${{matrix.msys.env}}
          update: true
          # Install toolchain packages requirements and Doxygen with DOT requirements
          install: >
            mingw-w64-${{matrix.msys.architecture}}-gcc
            mingw-w64-${{matrix.msys.architecture}}-cmake
            mingw-w64-${{matrix.msys.architecture}}-make
            mingw-w64-${{matrix.msys.architecture}}-doxygen
            mingw-w64-${{matrix.msys.architecture}}-graphviz

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup project deps
        working-directory: ${{github.workspace}}/dist
        run: ./get-deps-msys2.sh $TARGET

        env:
          TARGET: ${{matrix.msys.architecture}}

      - name: Generate and build project
        run: ./build.sh --mingw --debug-features

      - name: Run tests
        working-directory: ${{github.workspace}}/build
        run: ctest

      - name: Install project
        run: ./install.sh

      - name: Create TLS certificate and private key
        run: >
          openssl req -batch -x509 -newkey rsa:2048
          -keyout localhost.key -out localhost.pem -nodes -days 1
          -subj "//CN=localhost"

      - name: Run server
        run: minigames-server.exe --game a --log-level t --testing --crt localhost.pem --privkey localhost.key
